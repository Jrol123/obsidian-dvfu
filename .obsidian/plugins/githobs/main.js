/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitHobs
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  token: "",
  owner: "",
  repo: ""
};
function createSetting(plugin, container, args) {
  const { name, description, placeholder, value } = args;
  new import_obsidian.Setting(container).setName(name).setDesc(description != null ? description : "").addText(
    (text) => text.setPlaceholder(placeholder != null ? placeholder : "").setValue(plugin.settings[value]).onChange(async (val) => {
      plugin.settings[value] = val;
      await plugin.saveSettings();
    })
  );
}
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const createDescriptionWithLink = ({
      text,
      href,
      aText
    }) => {
      const fragment = document.createDocumentFragment();
      const div = fragment.createDiv({ text });
      div.createEl("a", { href, text: aText });
      fragment.append(div);
      return fragment;
    };
    createSetting(this.plugin, containerEl, {
      name: "Github Token",
      description: createDescriptionWithLink(
        { href: "https://github.com/settings/tokens/new", text: "Add the github token, alternately ", aText: "create one" }
      ),
      placeholder: "Enter your secret",
      value: "token"
    });
    createSetting(this.plugin, containerEl, {
      name: "Owner repo",
      value: "owner"
    });
    createSetting(this.plugin, containerEl, {
      name: "Repo name",
      value: "repo"
    });
  }
};

// src/view/index.ts
var import_obsidian4 = require("obsidian");

// src/helper/properties.ts
var GITHUB_ISSUE_PROPERTY_CODE = "github_issue";
var PROPERTIES_DELIMITER = "---";
function readProperties(data) {
  const [firstLine, ...restOfLines] = data.split("\n");
  if (firstLine !== PROPERTIES_DELIMITER) {
    return { properties: void 0, indexEndPropertiesLine: void 0 };
  }
  const indexEndPropertiesLine = restOfLines.indexOf(PROPERTIES_DELIMITER);
  if (!indexEndPropertiesLine) {
    return { properties: void 0, indexEndPropertiesLine: void 0 };
  }
  return {
    properties: restOfLines.slice(0, indexEndPropertiesLine),
    indexEndPropertiesLine: indexEndPropertiesLine + 1
  };
}
function removeProperties(data) {
  const { indexEndPropertiesLine } = readProperties(data);
  if (!indexEndPropertiesLine)
    return data;
  const dataSplitted = data.split("\n");
  return dataSplitted.slice(indexEndPropertiesLine + 1).join("\n");
}
function readIssueId(data) {
  const { properties } = readProperties(data);
  if (!properties)
    return;
  const githubIssueProperty = properties.find((p) => p.startsWith(GITHUB_ISSUE_PROPERTY_CODE));
  if (!githubIssueProperty)
    return;
  const [, issueId] = githubIssueProperty.split(":");
  return issueId;
}
function writeIssueId(data, issueId) {
  const { properties } = readProperties(data);
  return [
    PROPERTIES_DELIMITER,
    ...properties ? [...properties.filter((p) => !p.includes(GITHUB_ISSUE_PROPERTY_CODE))] : [],
    `${GITHUB_ISSUE_PROPERTY_CODE}: ${issueId}`,
    PROPERTIES_DELIMITER
  ].join("\n");
}

// src/api.ts
var import_obsidian2 = require("obsidian");
async function createIssue(settings, body) {
  const res = await (0, import_obsidian2.requestUrl)({
    url: `https://api.github.com/repos/${settings.owner}/${settings.repo}/issues`,
    headers: { Authorization: `Bearer ${settings.token}` },
    method: "POST",
    body: JSON.stringify(body)
  });
  if (res.status === 201) {
    new import_obsidian2.Notice("Issue successfully created");
  }
  return res;
}
async function updateIssue(settings, issueId, body) {
  const res = await (0, import_obsidian2.requestUrl)({
    url: `https://api.github.com/repos/${settings.owner}/${settings.repo}/issues/${issueId}`,
    headers: { Authorization: `Bearer ${settings.token}` },
    method: "PATCH",
    body: JSON.stringify(body)
  });
  if (res.status === 200) {
    new import_obsidian2.Notice("Issue successfully updated");
  }
  return res;
}
async function getIssue(settings, issueId) {
  const res = await (0, import_obsidian2.requestUrl)({
    url: `https://api.github.com/repos/${settings.owner}/${settings.repo}/issues/${issueId}`,
    headers: { Authorization: `Bearer ${settings.token}` },
    method: "GET"
  });
  return res;
}

// src/view/actions.ts
var import_obsidian3 = require("obsidian");
async function updateFile(file, res, externalData, title) {
  var _a, _b, _c, _d;
  try {
    const propertiesWithGithubIssue = writeIssueId(
      externalData != null ? externalData : file.data,
      res.json.number
    );
    if (title) {
      await this.app.vault.rename(
        file.file,
        ((_b = (_a = file.file) == null ? void 0 : _a.parent) == null ? void 0 : _b.path) === "/" ? `${title}.md` : `${(_d = (_c = file.file) == null ? void 0 : _c.parent) == null ? void 0 : _d.path}/${title}.md`
      );
    }
    await this.app.vault.modify(
      file.file,
      `${propertiesWithGithubIssue}
${removeProperties(
        externalData != null ? externalData : file.data
      )}`,
      { mtime: new Date(res.json.updated_at).getTime() }
    );
  } catch (e) {
    throw new Error("This issue is already tracked");
  }
}
async function pushIssue(issueId, file, settings) {
  var _a, _b, _c, _d;
  if (issueId) {
    const res2 = await updateIssue(settings, issueId, {
      title: (_b = (_a = file.file) == null ? void 0 : _a.basename) != null ? _b : "",
      body: removeProperties(file.data)
    });
    if (res2.status === 200) {
      await updateFile(file, res2);
    }
    return;
  }
  const res = await createIssue(settings, {
    title: (_d = (_c = file.file) == null ? void 0 : _c.basename) != null ? _d : "",
    body: removeProperties(file.data)
  });
  if (res.status === 201) {
    await updateFile(file, res);
  }
}
async function fetchIssue(issueId, settings, file) {
  const res = await getIssue(settings, issueId);
  const fileRead = this.app.vault.getFiles().find((f) => f.path === file.path);
  const lastDate = fileRead.stat.mtime;
  let status = void 0;
  if (lastDate && new Date(res.json.updated_at) > new Date(lastDate)) {
    status = "can-pull" /* CanPull */;
  }
  if (lastDate && new Date(res.json.updated_at) < new Date(lastDate)) {
    status = "can-push" /* CanPush */;
  }
  return { date: res.json.updated_at, status };
}
async function pullIssue(issueId, file, settings) {
  const res = await getIssue(settings, issueId);
  await updateFile(file, res, res.json.body, res.json.title);
}
async function changeIssueId(issueId, file, settings) {
  try {
    await pullIssue(issueId, file, settings);
    new import_obsidian3.Notice("Issue changed!");
  } catch (err) {
    new import_obsidian3.Notice(err);
  }
}

// src/view/index.ts
var GithubIssueControlsViewType = "github-issue-controls-view";
var GithubIssueControlsView = class extends import_obsidian4.ItemView {
  constructor(leaf, settings) {
    super(leaf);
    this.draw = () => {
      var _a, _b;
      const obContainer = this.containerEl.children[1];
      const fileOpened = this.leaf.view.app.workspace.activeEditor;
      const editor = this.leaf.view.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (!fileOpened) {
        obContainer.empty();
        return;
      }
      const rootElement = document.createElement("div");
      this.setIssueId(readIssueId(fileOpened.data));
      const viewContainer = createContainer(rootElement);
      if (!this.settings.repo || !this.settings.owner || !this.settings.token) {
        obContainer.empty();
        createInfoSection(
          viewContainer,
          {
            info: "Missing settings! \u{1F6A8}",
            description: `Please setup settings first`
          },
          true
        );
        createInfoSection(viewContainer, {
          info: "Reload",
          button: {
            icon: "refresh-ccw",
            action: async () => {
              this.reload(editor);
            }
          }
        });
        obContainer.appendChild(viewContainer);
        return;
      }
      createInfoSection(
        viewContainer,
        {
          info: "Issue Editor \u{1F9A4}",
          description: "Repo: ",
          descriptionBold: this.settings.repo
        },
        true
      );
      createInfoSection(viewContainer, {
        info: "Issue number:",
        button: {
          icon: "crosshair",
          action: async () => {
            if (!this.issueId) {
              new import_obsidian4.Notice("Select a issue id");
              return;
            }
            return await changeIssueId(this.issueId, fileOpened, this.settings);
          }
        },
        input: {
          value: (_b = (_a = this.issueId) == null ? void 0 : _a.trim()) != null ? _b : "",
          type: "number",
          onChange: async (val) => this.setIssueId(val)
        }
      });
      createInfoSection(viewContainer, {
        info: "Fetch",
        description: this.issueId ? this.fetchDate : "First push",
        button: {
          icon: "refresh-ccw",
          action: async () => {
            if (!this.issueId || !fileOpened.file) {
              return;
            }
            const fetchedIssue = await fetchIssue(
              this.issueId,
              this.settings,
              fileOpened.file
            );
            this.setFetchDate(fetchedIssue.date);
            this.status = fetchedIssue.status;
            this.reload(editor);
          }
        }
      });
      createInfoSection(viewContainer, {
        info: "Push",
        description: this.status === "can-push" /* CanPush */ ? "\u{1F7E2} Changes can be pushed" : "",
        button: {
          icon: "upload",
          action: async () => {
            await pushIssue(this.issueId, fileOpened, this.settings);
            this.status = void 0;
            this.reload(editor);
          }
        }
      });
      if (this.issueId) {
        createInfoSection(viewContainer, {
          info: "Pull",
          description: this.status === "can-pull" /* CanPull */ ? "\u{1F534} New version available" : void 0,
          button: {
            icon: "download",
            action: async () => {
              await pullIssue(this.issueId, fileOpened, this.settings);
              this.status = void 0;
              this.reload(editor);
            }
          }
        });
      }
      obContainer.empty();
      obContainer.appendChild(viewContainer);
    };
    this.settings = settings;
  }
  getViewType() {
    return GithubIssueControlsViewType;
  }
  getDisplayText() {
    return "Github Issue Controls";
  }
  getIcon() {
    return "github";
  }
  load() {
    super.load();
    this.fetchDate = void 0;
    this.status = void 0;
    this.issueId = void 0;
    this.draw();
  }
  setFetchDate(fetchDate) {
    this.fetchDate = fetchDate;
  }
  setIssueId(issueId) {
    this.issueId = issueId;
  }
  reload(editor) {
    editor == null ? void 0 : editor.editor.focus();
    this.draw();
  }
};
function createContainer(rootEl) {
  const c = rootEl.createDiv({ cls: "vertical-tab-content-container" });
  return c;
}
function createInfoSection(containerToAppend, {
  info,
  description,
  descriptionBold,
  button,
  dropdown,
  input
}, headerInfo = false) {
  let i;
  if (!headerInfo) {
    i = containerToAppend.createDiv({ cls: "setting-item" });
  } else {
    i = containerToAppend.createDiv({ cls: "setting-item setting-item-heading" });
  }
  const infoElement = i.createDiv({ cls: "setting-item-info" });
  infoElement.createDiv({ cls: "setting-item-name", text: info });
  if (description) {
    const descEl = infoElement.createDiv({
      cls: "setting-item-description",
      text: description
    });
    if (descriptionBold) {
      descEl.createEl("strong", { text: descriptionBold });
    }
  }
  let settingControl;
  if (button || dropdown || input) {
    settingControl = i.createDiv({ cls: "setting-item-control" });
    if (input) {
      const inputEl = settingControl.createEl("input", { cls: "githobs-input" });
      inputEl.setAttribute("type", input.type);
      inputEl.setAttribute("value", input.value);
      inputEl.onchange = (val) => {
        input.onChange(val.target.value);
      };
    }
    if (dropdown) {
      const select = settingControl.createEl("select");
      select.className = "dropdown";
      dropdown.items.forEach((i2) => {
        const o = select.createEl("option", { text: i2.text });
        o.setAttribute("value", i2.value);
      });
    }
    if (button) {
      const btn = settingControl.createEl("button");
      (0, import_obsidian4.setIcon)(btn, button.icon);
      btn.onclick = async () => {
        (0, import_obsidian4.setIcon)(btn, "hourglass");
        btn.setAttr("disabled", "");
        await button.action();
        (0, import_obsidian4.setIcon)(btn, button.icon);
        btn.removeAttribute("disabled");
      };
    }
  }
  return i;
}

// src/main.ts
var GitHobs = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.toggleGitHubIssueControlsView = async () => {
      const existing = this.app.workspace.getLeavesOfType(GithubIssueControlsViewType);
      if (existing.length) {
        this.app.workspace.revealLeaf(existing[0]);
        return;
      }
      await this.app.workspace.getRightLeaf(false).setViewState({
        type: GithubIssueControlsViewType,
        active: true
      });
      this.app.workspace.revealLeaf(
        this.app.workspace.getLeavesOfType(GithubIssueControlsViewType)[0]
      );
    };
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      GithubIssueControlsViewType,
      (leaf) => this.gitHubIssueControlsView = new GithubIssueControlsView(leaf, this.settings)
    );
    this.addRibbonIcon("github", "Manage a github issue", async () => {
      this.toggleGitHubIssueControlsView();
    });
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", () => this.gitHubIssueControlsView.load())
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

/* nosourcemap */